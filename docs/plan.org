#+STARTUP: hidestars
#+STARTUP: odd
#+STARTUP: showall

* Docs:
*** DONE Clean up taskontrol.core
*** TODO Document taskontrol.core
*** TODO Clean up taskontrol.plugins

* BUGS (fix soon):
*** TODO Overwrite saves on top of an existing file and data is corrupted.
*** DONE Up to 2014-04-14 I was calling self.params.update_history() outside if nextTrial>0:
    but update_history() uses append, so it created an extra item at the beginning.
    I should change update_history() so that it takes the parameter (nextTrial-1)
*** DONE Block switches don't happen exactly at multiples of 300.
    It may be related to the bug about update_history() but I'm not sure.
    I could replicate this problem by shifting the 'valid' array, so it is likely
    that the problem was a misalignment between 'currentBlock' and 'valid',
    because of the problem with update_history().

* Remote repository (on client):
  sudo apt-get install sshfs
  sudo mkdir /mnt/jarahubdata
  sudo chmod 777 /mnt/jarahubdata
*** Set up ssh:
  mkdir ~/.ssh
  chmod 700 ~/.ssh
  rsync -a jarahub:~/.ssh/id_rsa ~/.ssh/
  ssh-add ~/.ssh/id_rsa

*** Generate key [only once, in jarahub]
  ssh-keygen -t rsa -C "jarauser@jararig"
  [save with default name]
  cat id_rsa.pub >> ~/.ssh/authorized_keys

  ssh jarahub
  [may need to answer YES to verify authenticity of host]

*** To mount (need to map uid)
  sshfs -o idmap=user jarauser@jarahub:/data/behavior/ /mnt/jarahubdata
*** To unmount:
  fusermount -u /mnt/jarahub

*** For rsync, you need to use flag --no-g to avoid errors when
    the uid in server and client are not the same.

* For main paradigm:
*** TODO Save to repository of data.
*** TODO Percent one side
*** DONE Randomize time before stimulus
*** TODO Design water reward module.
*** TODO Write protocol for calibration water (almost done)
*** TODO How to estimate time of withdrawals before stim?
    A histogram would be cut at sound-onset because of before that, the trials
    are not restarted, the machine just goes to waitForCpoke.
*** DONE Plot with average performance.
*** DONE Antibias: repeat-mistake
*** DONE Randomize intensity of sound.

* To do soon:
*** TODO Currently, no indices can be skipped when defining inputs and outputs in settings.
    Unexpected behavior may occur (for example when dispatcher shuts off all output on stop).
*** DONE Outputs may stay on after pressing stop.
    Solution: on dispatcher.pause shut them all off. Dispatcher needs to know how many outputs
    there are. This can be defined in two ways:
    1. Every paradigm needs to specify nOutputs parameter when creating dispatcher
    2. Importing rigsettings in dispatcher (this is the current solution)
*** TODO Save dicts as something else (currently each item is one variable)
*** DONE remove the old soundclient.py
*** TODO Object to set layout
*** TODO sidesplot.py: allow giving dict of outcomes/colors as parameter.
*** TODO sidesplot.py: make dialog with color-code
*** TODO sidesplot.py: allow more than just filled circles.
*** TODO FEATURE: have a method to add elements to params. For example:
    self.params.add(type='Numeric',name='leftProb',label='Prob left',value=0.5,group='Choice')
*** TODO Find which serial port has the state machine.
*** TODO Make emulator show all other outputs
*** DONE dispatcher: make _set_state_matrix() which takes lists
    and change set_state_matrix() to take sm as input (and define get_ready_states)
*** DONE enable saving strings
*** TODO savedata.py Send to remote repository
***** TODO Make remote dir recursively.
***** TODO Make a backup of the file if already exists
*** TODO savedata.py Update database
*** TODO dispatcher.set_state_matrix() needs parameters by name
*** TODO SoundClient needs a way to die gracefully.
*** TODO smclient should have a way to define the serial port, and
    dispatcher should read the one from rigsettings
*** TODO What happens if rigsettings defines outputs #1 and #3, but not #2?
*** TODO Inputs in arduino may need to be pull-down by hardware
*** TODO Check versions of SM server and client are the same When connecting.
*** DONE plugins/loadparameters (Find an easy way to set parameters )
*** DONE When failing, it should disconnect the state machine
    Just create dispatcher the latest you can
*** TODO Check that outputs work by using the LED on the arduino.
*** TODO save a checksum of the Paradigm code to verify that version is the same
*** DONE ManualControl (see plugins)
*** TODO StyleSheets (see stylesheets and manualcontrol)
*** DONE Finish fixing savedata given subject/experimenter/date/suffix.
*** TODO Save paradigm name somewhere in the data (see sessionData in the HDF5 file)
*** DONE Example008: estimate times
*** TODO Disassemble events and extract choice, times, etc.
*** TODO Make a protocol that uses extra timers with statematrix.py
*** TODO Check doc string on each method of core (start with dispatcher)
*** DONE Save results and parameters on the same location 'root/trialData'
*** TODO SaveData:
***** TODO Add paradigm name to file name
***** TODO Be smart if data file exists
*** TODO StateMatrix:
***** TODO Check validity of state matrix sm.get_matrix(verify=True)
      Useful after reset and redefined.
***** TODO statematrix.py : Check if there are orphan states.
***** DONE The objects should be created only once per paradigm
***** DONE On each trial, it once should 'reset-trasitions', and redefine them
      This way the list of states is unique (valid for all trials)
***** DONE Is a state exists, use it and update its transitions
*** DONE Add extra timers to statematrix.py
*** DONE Connect run/stop signals to messenger (example007)
*** DONE Load data saved by SaveData. See examples/test002_readdata.py
*** DONE SaveData:
***** DONE Avoid error when saving before RUN
***** DONE Fix interactive saving
***** DONE Close file if there is an error while saving to it
***** DONE Save rawEvents as one array of times and one of integer transitions
*** DONE savedata.SaveData.to_file() should not have a parameter of type paramgui.Container
    because it is defined in another module and I should avoid dependencies.
    SOLUTION: this method takes as input a list of objects with method append_to_file()
              it doesn't matter what object type as long as it has that method.
*** PerformanceDynamicsPlot:
***** DONE Move window when reaching the end.
*** DONE Soundclient emulator (to test paradigms).
    I can now run paradigms that have sound without errors, but no sound yet.
    The problem is that I don't know how to trigger SoundClient.play_sound()
     from smemulator.enter_state() (where the serial output are changed).
    Maybe get the soundclient to read something over and over, and have
     smemulator change that.
*** DONE on_next_correct is reported the same as only_if in sidesplot
    Not anymore. There is an outcome called 'aftererror'
*** DONE Have a state that indicates aborted? or some way anyway
    and plot it in sidesplot.
    It's not really a state. I am checking if transition is forced into state -1
*** DONE sidesplot should show nochoice trials.
*** DONE Show how many valid trials and how many rewarded
*** DONE If the state matrix has not been created with all possible states at
    the beginning, there is a chance that calculate_results will fail,
    because it asks for example for self.sm.statesNameToIndex['choiceLeft']
    which has not been created (on 'direct' mode)
*** DONE Incrementing a paramgui is cumbersome
    self.params['nRewarded'].set_value(self.params['nRewarded'].set_value()+1)
    Maybe we can add a method for incrementing
*** DONE Redo sounds when parameters change
    Sounds are now created before each trial
*** DONE Save hostname and date/time in sessionData group
    See paramgui for creation of that group
*** DONE Menu params are saved different than Labels of variables:
    menus are saved as dicts {int:str}, labels as var1:int, var2:int, ...
*** DONE Separate rawEvents into times and transitions.
***** Data comes to dispatcher as [prevstate time nextstate]
***** Should save as [time] and [prevstate, nextstate]
***** protocol.save_to_file() calls
      self.saveData.to_file(self.params,self.dispatcherModel.eventsMat)
*** DONE Make an emulator (in addition to the dummy)
*** DONE SaveData.to_file takes very specific inputs (like a paramgui.Container)

* To do later:
*** TODO Add test cases for each module/method
*** TODO Make specific exceptions when needed.

* To do (extra plugins):
*** TODO Fix eventsplot [2/3]
***** DONE Color disappearing earlier that it should
***** TODO Plot events, not just states
***** DONE setStatesColor, use state names
*** TODO Module for creating generic sounds (tones, noise, AM, FM, etc)
*** TODO Graphical interface (detachable) for setting sound parameters.

* WaterCalibration:
*** TODO Before pressing start, N deliveries appears as 1
    because the trial has been prepared (by prepare_next_trial)
*** DONE Why does it start with the valve on?
    Because the machine stops in state#1 to wait for RUN button press.
    If state#1 is the ValveOn, then that output is on.
    I included a 'startTrial' state.
*** DONE How to stop from code:
    dispatcherModel.pause() did not work
    dispatcherView.stop() worked but I can't restarted
    It stops at state0 and does not move after START button
    because test condition nTrials<nDeliveries is false
    I added a 'Ndelivered' variable.

* Solving the START/STOP dispatcher issue to advance one trial
*** DONE Find how dispatcher knows that a new trial has happened
    It polls past events and checks if machine has reached state 0
    method timeout() checks if self.currentState in self.prepareNextTrialStates
    it then emits prepareNextTrial
*** DONE When stopping dispatcher, the system should label that trial as invalid
    and prepare a new one when pressing start again. Be careful that it does not
    add a new trial at the end of a session when stop is pressed.
    Think if it's good to prepare a trial when pressing START. (first time and after)
*** DONE dispatcher.resume() now emits prepareNextTrial signal
*** The new flow has been implemented, but has the following problems:
***** DONE dispatcherModel.events_one_trial() includes state 0
      both at the end and at the beginning.
      Not anymore. Even trial 0 only includes from state 1 on (until state 0 at the end)
***** DONE Start-stop-start on trial 0 causes error:
      IndexError: list index out of range in dispatcher.py(277)events_one_trial()
      indLast = self.indexLastEventEachTrial[-1]
      because self.indexLastEventEachTrial is empty
***** DONE Stop-start after a few trials causes trial outcome to be the same
      as the last not-aborted trial (it should be aborted and shown in black)
      Probably because self.indexLastEventEachTrial was not updated
***** DONE SOLUTIONS:
******* I need to make sure that update_trial_borders() is called when STOP
	so that the aborted trial is registered in indexLastEventEachTrial
******* This call could be made in different ways:
********* call timeout() on dispatcher.resume()  [CHOSEN]
********* call update_trial_borders() on dispatcher.pause()
*** The OLD flow is as follows:
***** Paradigm GUI opens
******* currentTrial=-1  (defined by dispatcher)
******* state=0          (defined by dispatcher 'currentState')
	The state is updated via statemachine.get_events() after START button is pressed.
***** paradigm.prepare_next_trial(0) is called at the end of __init__, which calls:
******* set_state_matrix(nextCorrectChoice)
******* dispatcherModel.ready_to_start_trial()
***** dispatcherModel.ready_to_start_trial()
******* self.currentTrial += 1
******* self.statemachine.force_state(1)
***** On START: dispatcher.resume() calls statemachine.run()
******* Since state is already 1, the state machines runs until it reaches the end of a trial
******* for example, reaching state 'readyForNextTrial' (state 0)
***** dispatcher.timeout() checks if currentState is in prepareNextTrialStates
******* If so, it emits prepareNextTrial.emit(self.currentTrial+1)
******* The list of prepareNextTrialStates is obtained via stateMatrix.get_ready_states()
******* The default readystate (defined by stateMatrix) is 'readyForNextTrial' (state 0)
***** paradigm.prepare_next_trial() updates history and calls:
******* set_state_matrix(nextCorrectChoice)
******* dispatcherModel.ready_to_start_trial()
***** dispatcherModel.ready_to_start_trial()
******* self.currentTrial += 1
******* self.statemachine.force_state(1) (and the machines continues)
***** On STOP: dispatcher.pause() calls self.statemachine.stop()
******* self.statemachine.force_state(0)
***** On START: dispatcher.resume() calls statemachine.run()
******* Because state is 0, dispatcher.timeout() should see it and prepare a trial
***** OBSERVATIONS:
      - Changing a parameter before starting does not change the first trial
*** The NEW flow should be:            
***** Paradigm GUI opens
******* currentTrial=-1  (defined by dispatcher)
******* state=0          (defined by dispatcher 'currentState')
	The state is updated via statemachine.get_events() after START button is pressed.
***** dispatcher sets a matrix of only zeros
******* reset_state_matrix()
***** On START: dispatcher.resume() calls statemachine.run()
******* The machine stays at state 0
******* dispatcher.resume() emits prepareNextTrial.emit(self.currentTrial+1)
	(the order of run and emit should not matter, the machine stays at 0)
***** paradigm.prepare_next_trial() updates history and calls:
******* set_state_matrix(nextCorrectChoice)
******* dispatcherModel.ready_to_start_trial()
********* I need to add a conditional to avoid trying to update inexistent history
********* Make sure updating history is not done twice!
	  before and after stopping, or missing one trial if trial aborted.
***** dispatcherModel.ready_to_start_trial()
******* self.currentTrial += 1
******* self.statemachine.force_state(1) (and the machines continues)
*** Alternative:
***** On START: dispatcher.resume()
******* Prepare next trial: create state matrix and upload (and wait until it's done)
******* Force state 1
******* Call statemachine.run()
	The problem is that dispatcher would need to know when prepare next trial
	is done before calling statemachine.run()

* Bugs and fixes:
*** TODO What happens if a new matrix is send while the machine is still running?
    Presumable it can create empty transitions or go crazy?
    This should only happen while on state 0, but what about other 'ready' states?
*** TODO Some of the core classes/methods depend on settings.rigsettings.
    This simplifies the way these methods are called, but it may change in the
    future to eliminate cross-dependencies.
*** TODO paramgui.Container.update_history() may create trouble. The history
    for each parameter is stored as a list (and append() is used to update it).
    This may get out of sync with trial-number if user calls update_history()
    more than once within a trial.
*** TODO The way data is saved makes it difficult to replace the format.
    Currently, savedata calls the append_to_file method of each module. That means
    all modules have to agree on the type of file. There should be a file-type
    independent interface.
*** TODO Unplugged inputs are floating (not pull-up or pull-down).
    How to make sure these don't cause problems?
    The software should only look at defined/connected inputs.
*** TODO Is FORCE_OUTPUT compatible with the way we deal with outputs,
    and the fact that a state may not change some outputs?
*** TODO What happens if Dispatcher.timeout() gets called too often?
    Should I stop the calls to timeout while processing things inside it?
*** TODO Test if get_events() disturbs the timing of the state machine.
*** TODO When importing core modules from core modules, should I do it absolute or
    relative (from taskontrol.core import xxx, or just import xxx)
*** TODO Check the way paramgui.MenuItems are saved. Maybe use append_dict_to_HDF5
    instead of attributes.
*** TODO On sidesplot, the graph jumps (changes slightly the x axes) after the first
    trial. It must be something weird about pyqtgraph.
*** TODO When saving a file that existed before, h5py seems to load information from the 
    old file not the truncated version. SOLUTION: maybe the file was still open in ipython
*** TODO The rawEvents could be saved as one matrix [eventTime eventCode nextState]
    or as three vectors (float, int, int). The latter option will make file smaller (and
    maybe faster), but more cumbersome to save/load.
*** TODO For default 2-AFC paradigm:
        # FIXME: There is an alternative way with states 'RewardLeft' 'RewardRight'
        ###### FIXME: you should define the states only once, but define transitions
        ############# for each trial. That way you ensure the same statesDict every time.
*** TODO it looks like sched waves cannot be triggered on State 0.
*** TODO if the time from State 0 to another state is zero, it never moves.
*** TODO currentTrial is sent by signal to startNewTrial(), but can also be
    accessed from protocol.dispatcher.currentTrial
*** TODO what happens if signal 'READY TO START TRIAL' is sent while on JumpState?
    does it jump to new trial or waits for timeout?
*** TODO If using IPython there is a segfault if you run a protocol,
    close its window and try to run it again.
    It seems to be related to Qt4 not the StateMachine.
    See .../test/test012_qt4segfault.py  and this link
    http://mail.scipy.org/pipermail/ipython-user/2007-November/004797.html
*** TODO A python bug? about conditionally importing modules.
    The following code for alternative loading of dummy smclient:
    if dummy:
	    #from taskontrol.plugins import smdummy as smclient
	    reload(smclient)
    gives the error:
      local variable 'smclient' referenced before assignment
*** TODO Antipatterns:
***** http://en.wikipedia.org/wiki/Sequential_coupling (on smclient)
***** http://en.wikipedia.org/wiki/BaseBean (on netclient)
*** TODO Why are sched waves an attribute of the class?
    but the state matrix is not?
*** TODO QtGui.QFileDialog.getSaveFileName() is horribly slow.
    But only when run from from ipython. Maybe it is related to the
    following bug, since the error message does not appear under ipython:
    https://bugs.kde.org/show_bug.cgi?id=210904
    (5001) findLibraryInternal: plugins should not have a 'lib' prefix: "libkfilemodule.so"
    (5001) KPluginLoader::load: The plugin "libkfilemodule" doesn't contain a kde_plugin_verification_data structure
*** DONE I have been using =smIDstr.split()[0]= to extract values,
    but maybe this will change if I split things in DoQueryCmd()
*** DONE I seem to be sending extra strings after GetEvents()
    The server says: "Got:  " and then "Connection to host ended..."
    SOLUTION: I just had to restart the FSM server to avoid this.
*** DONE Check if realines can be done by reading up to a line-break
    Probably not, because if server sends a byte representing the same
    as a '\n', there is no way to tell which one of the two it was.
*** DONE Socket timeout is a weird way of stop receiving from socket.
    Although I don't know if there is a better way.  Note: I had to
    increase the timeout to avoid raising exceptions all time. So
    while in the C code it was 1ms, in the python client it is
    100ms. See NetClient.cpp: NetClient::receiveLines()
*** DONE GetTimeEventsAndState repeats code from DoQueryMatrixCmd
    It should be more modular.
*** DONE Many methods request one parameter (bool, int or float) and OK.
    There should be a method for this.
*** DONE Make orouting a dict instead of a class
*** DONE Fix getTimeEventsAndState (to use methods from BaseClient)
*** DONE Show current trial in dispatcher
*** DONE If prepareNextTrialStates has more than two states,
    they may both emit signals. That is not correct.
*** DONE BUG!!! if a timer is up and Tup transition does not exist (i.e. it stays in state)
    the system starts generating Tup events after time 0 without stopping
    (At least in the emulator, not sure about the real thing)
    Is it because it does not enter the state again? Check line 207 statemachine.ino
    OPTIONS:
***** Re-enter state (execute enter_state) when timer is up
      (the user needs to be aware of this to avoid overflowing the events matrix)
      it has the consequence that it re-starts extratimers (???)
      The problem is that any other event that does not produce a transition
      will also re-start timers!
***** Do not execute enter_state when timer is up but no transition
      but reset timer.
      Does this solve the problem of the timer event being trigger ad-infinitum?
***** SOLUTION: the emulator was missing a 'self.' in front of stateTimerValue
      Everything should work fine (emulator and sm) without running enter_state


* Questions:
*** What is the state matrix column called CONT_OUT in SetStateMatrix?
*** What is the state matrix column called TRIG_OUT in SetStateMatrix?
*** What does BypassDout() do?
    The comment says that it sets outputs to be whatever the state
    machine would indicate, bitwise or `d with "d."
*** How are sched waves sent to the server?
    The comments seem to indicate that they get concatenated to the
    state matrix, but is this column or row-wise? Couldn't we just
    send the state matrix first and then the sched waves?
*** Does the input_event_mapping need to know about ScheduleWaves?
    Since it is sent to the server as the last row of the matrix, it seems so,
    but then, what is the appropriate value for a SW input?
*** Do event numbers start from 1 or 0 (when using GET_EVENTS %d %d)?
*** What is the number of columns of the events-matrix? 4 or 5?
    The fifth one used to be the Nspike time. Is it still in use?
*** Why do we need 'READY TO START TRIAL' (and ready_for_trial_jumpstate)?
    shouldn't that be implemented by the client with 'FORCE STATE %d'
    The only reason I see if you want the SM to do something while
    preparing the next trial, and don't want to jump out of it in the
    middle of something (but only when it reaches a special state).
    

* Python tips and code improvements:
*** Write docstrings according to PEP257:
    http://www.python.org/dev/peps/pep-0257/
*** DONE Use isinstance(obj, int) instead of comparing types
*** TODO Do not compare with == (singleton), use 'is'
*** TODO Don't compare boolean values to True or False using ==
*** DONE Use .join() instead of +=
*** TODO Be explicit about which exception is catched
*** DONE endswith() instead of slicing string
*** TODO Use code-testing: :CODE_TESTING:

* Notes on developing in python:
*** Python style
***** Style guide: http://www.python.org/dev/peps/pep-0008/
***** Unofficial guide: http://jaynes.colorado.edu/PythonGuidelines.html
***** Code like a pythonista:
      http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html
*** Ten pitfalls:
    http://zephyrfalcon.org/labs/python_pitfalls.html
*** Code testing:
    http://docs.python.org/library/doctest.html
    http://docs.python.org/library/unittest.html
*** Performance:
    http://wiki.python.org/moin/PythonSpeed/PerformanceTips
*** Ipython:
***** DONE Debugger:
******* Running 'run -d script' did not work:
	"AttributeError: Pdb instance has no attribute 'curframe'"
	https://bugs.launchpad.net/ubuntu/+source/ipython/+bug/381069
	But running "ipython -pdb" worked.
******* Trying to use pydb failed because it installed only for python2.4
******* SOLUTION: running 'ipython -pdb' worked fine.
***** DONE TAB-autocompletion:
      It adds a blank space after the completion, very annoying.
      Try for example: cd /hom<TAB>
      http://mail.scipy.org/pipermail/ipython-user/2005-March/002612.html
      https://bugs.launchpad.net/ipython/+bug/470824
******* SOLUTION: link  libreadline.so.6 to libreadline.so.5.2
	instead of linking to libreadline.so.6.0
***** Profiler has to be installed separately because of its license:
      The Debian package is called 'python-profiler'.
      In any case, it didn't really work the way I wanted. Gotta try again.
***** TODO Automatic reloading of modules
      Running one script does not reload the modules it imports, so
      any changes to those modules are ignored until reloading explicitely.


* PySide:
*** To be able to stop an application with CTRL-C add:
    import signal
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    See also: http://stackoverflow.com/questions/4938723/what-is-the-correct-way-to-make-my-pyqt-application-quit-when-killed-from-the-co
*** New way of doing signals and slots (PySide)
    http://qt-project.org/wiki/Signals_and_Slots_in_PySide
*** If using QtCore.Signal(), it has to be placed before the constructor (__init__)
    http://stackoverflow.com/questions/2970312/pyqt4-qtcore-pyqtsignal-object-has-no-attribute-connect

* pyqtgraph:
*** This is one possibility for efficient plots in the main paradigm window.
    http://www.pyqtgraph.org/
*** It requires scipy.
*** 

* Links and tips on tools:
*** Git:
    Manual: http://www.kernel.org/pub/software/scm/git/docs/user-manual.html
    Crash course: http://git-scm.com/course/svn.html 
    For the lazy: http://www.spheredev.org/wiki/Git_for_the_lazy
    In emacs    : http://parijatmishra.wordpress.com/2008/09/06/up-and-running-with-emacs-and-git/
    In Ubuntu   : https://help.ubuntu.com/community/Git
*** GitHub:
    git remote add origin git@github.com:sjara/TASKontrol.git
    git push origin master
*** Org-mode:
    Manual: http://orgmode.org/manual
*** Matlab (C++ API)
    http://www.mathworks.com/access/helpdesk/help/techdoc/index.html?/access/helpdesk/help/techdoc/apiref/mxgetpr.html&http://www.google.com/search?q=mxGetPr&ie=utf-8&oe=utf-8
*** Python:
    Tutorial: http://docs.python.org/tutorial/
    Reference: http://docs.python.org/reference/
    TIP: range(*args)   # call with arguments unpacked from a list
    Struct (and info on type sizes): http://docs.python.org/library/struct.html
*** Emacs:
    Hideshow minor mode: http://www.gnu.org/software/emacs/manual/html_node/emacs/Hideshow.html
*** PyQt:
***** Reference:
      http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/classes.html
***** Matplotlib:
      http://eli.thegreenplace.net/2009/01/20/matplotlib-with-pyqt-guis/
      http://eli.thegreenplace.net/2009/05/23/more-pyqt-plotting-demos/
***** File dialog:      	
      http://zetcode.com/tutorials/pyqt4/dialogs/
*** Numpy:
    Tutorial (new): http://www.scipy.org/Tentative_NumPy_Tutorial
    Tutorial (old):
    For Matlab users: http://www.scipy.org/NumPy_for_Matlab_Users
*** BControl and RTLinux FSM:
    http://brodylab.princeton.edu/bcontrol/index.php/Main_Page
    http://code.google.com/p/rt-fsm/
*** Sphinx (Ubuntu 12.04):
***** Install python-sphinx
***** Run: sphinx-quickstart (say 'yes' to autodoc)
***** Go to .../doc/ and run: make html
***** Open in browser: .../doc/_build/html/index.html
*** Documenting (docstrings, Sphinx, etc):
***** I decided to make docstrings the google style as opposed to sphinx style
      to keep them readable from ipython's help.
******* Google style:
	http://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=Comments#Comments	
******* Comparison and discussion:
	http://pythonhosted.org/an_example_pypi_project/sphinx.html#function-definitions
******* To render it nicely in Sphinx you need:
	https://pypi.python.org/pypi/sphinxcontrib-napoleon/
	(I installed it with pip)
***** Example from numpy:
      https://github.com/numpy/numpy/blob/master/doc/example.py
***** Check how matplotlib does it (I think with ReST tables)

* Misc:
*** FIXED (2010-05-12) see ./compiling_FSMemulator.txt
    I can't run the emulator on Ubuntu 9.10 because of a bug (in glibc?) about threads.
    It run fine on Ubuntu 9.04. I think the bug is related to:
    https://bugs.launchpad.net/ubuntu/+source/glib2.0/+bug/453898
    https://bugzilla.gnome.org/show_bug.cgi?id=599079


* Design:
*** StateMachineClient
    connect, setStateMatrix, setScheduleWaves, run, halt, getEvents, and more.
*** SoundClient
    connect, loadSound, and more.
*** Dispatcher
    Qt widget with a run button and a display of the time and state of the SM.
    It keeps time and trial count, and serves as the interface for setting the state
    transition matrix and getting events back.
*** Protocol
    Design state matrix and parameters.
*** paramgui.Container
    Dictionary holding all graphical parameter. It has methods to help layout.
*** paramgui.StringParam, paramgui.NumericParam, paramgui.MenuParam
    Object holding a label and value. It will be saved for each trial.
    It can be: label+editbox or menu
*** NOT IMPLEMENTED:
***** SoundManager
      It does not seem necessary. SoundClient.loadSound() would do.


* Adding schedule waves:
*** output_routing has to know about the SW because setStateMatrix
    sends a URLstring with that info.
*** It looks like self.input_event_mapping does not need to change for SW
    so there is no need for calling setInputEvents.


* Debugging (and what happens on each type of error):
*** Best option so far is use only QtCore.pyqtRemoveInputHook() and 'ipython -pdb'
*** Using 'ipython -pdb'
***** SyntaxError: it shows location of error (does not enter debug mode).
***** AttributeError, NameError, TypeError on __init__:
      it stops before GUI and enters (ipdb) debug mode.
***** NameError on prepareNextTrial():
      ipdb> QCoreApplication::exec: The event loop is already running
      (... indefinitely, until hitting CTRL-C)
      If running outside ipython, it shows the error and continues.
*** Two solutions:
***** QtCore.pyqtRemoveInputHook()
      On 'ipython -pdb' shows trace invokes pdb.
      On 'python file.py' shows trace and continues.
      On 'ipython -pdb -q4thread' shows trace and continues.
      I don't know how to stop dispatcher using only that.
***** Redefine sys.excepthook
      On 'ipython -pdb' it can show trace and stop dispatcher.
      On 'python file.py'  ???
      On 'ipython -pdb -q4thread' ???
      I don't know how to invoke pdb inside ipython when redefining sys.excepthook.
***** Best option so far is use only QtCore.pyqtRemoveInputHook() and 'ipython -pdb'
      But then if you run the protocol with 'python file.py', you may not realize
      that there has been an error.
*** TODO Deal with exceptions from PyQt4 app. If exception occurs during execution,
    stop the timers. See test014_exceptionhandling.py and the following threads:
    http://efreedom.com/Question/1-1736015/Debugging-PyQT4-App
    http://www.mail-archive.com/pyqt@riverbankcomputing.com/msg10718.html
    http://stackoverflow.com/questions/674067/how-to-display-errors-to-the-user-while-still-logging-it
*** To invoke debugger from inside excepthook:
    http://stackoverflow.com/questions/1237379/how-do-i-set-sys-excepthook-to-invoke-pdb-globally-in-python
    This does not work when using PyQt4
*** TODO If statematrix transition calls for an undefined state,
    there is an error in /home/sjara/src/taskontrol/core/dispatcher.py(147)setStateMatrix()
    Check for orphan states


* Arduino (Ubuntu):
*** http://arduino.cc/en/main/software
*** Download, decompress, and place in some folder (e.g., /opt/)
*** Run /opt/arduino-1.5.2/arduino
*** Select Tools>Board>ArduinoDue(prog)
*** Add yourself to the dialout group
    sudo usermod -aG dialout <username>
    (you need to re-login for it to take effect)
*** Select Tools>SerialPort>/dev/ttyACM0
*** Code is in ~/src/arduino/statemachine
